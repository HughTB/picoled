#include <cstdio>
#include "displays.hxx"

int clamp(int value, int min, int max) {
    return (value < min) ? min : (value > max) ? max : value;
}

void draw_graph(SSD1306* display, uint8_t x_pos, uint8_t y_pos, uint8_t width, uint8_t height, const uint8_t* values, size_t num_values, bool filled) {
    uint bar_width = width / num_values;

    // For each bar,
    for (size_t i = num_values; i > 0; i--) {
        // For each column of the bar,
        for (int j = 0; j < bar_width; j++) {
            if (filled) {
                for (int k = 0; k < ((values[i] * height) / 100); k++) {
                    display->setPixel(
                        (int16_t)((x_pos + width) - (bar_width * i) - j),
                        (int16_t)clamp((y_pos + height) - k, y_pos, height - 1)
                    );
                }
            } else {
                // Set the pixel at the top of the bar
                display->setPixel(
                    (int16_t)((x_pos + width) - (bar_width * i) - j),
                    (int16_t)clamp((y_pos + height) - ((values[i] * height) / 100), y_pos, height - 1)
                );
            }
        }
    }
}

void display_graph_screen(SSD1306* display, const char* label_text, const uint8_t* values, size_t num_values) {
    // Create the bottom text using the first value in the list, displaying a percent sign if <100, or just the number 100
    char bottom_text[4];
    snprintf(bottom_text, 4, "%2d%%", values[0]);

    // Ensure that only 6 characters (+ null terminator) from label_text are drawn to the display
    char top_text[7];
    snprintf(top_text, 7, "%s", label_text);

    // Draw the label text and current percentage
    drawText(display, font_8x8, top_text, 0, 0);
    drawText(display, font_16x32, bottom_text, 0, 6);

    // Draw the graph
    draw_graph(display, 48, 0, SCREEN_WIDTH - 48, SCREEN_HEIGHT, values, num_values);
}

void display_generic_screen(SSD1306* display, const char* text, bool large) {
    if (large) {
        // Ensure only up to 8 characters (and null-terminator) are drawn to the screen
        char displayed_text[9];
        snprintf(displayed_text, 9, "%s", text);

        drawText(display, font_16x32, displayed_text, 0, 0);
    } else {
        // Ensure only the first 10 characters are drawn to the screen
        char top_text[11];
        snprintf(top_text, 11, "%s", text);

        drawText(display, font_12x16, top_text, 0, 0);

        if (strlen(text) > 10) {
            // Grab the next upto 10 characters
            char bottom_text[11];
            snprintf(bottom_text, 11, "%s", text + 10);

            drawText(display, font_12x16, bottom_text, 0, 16);
        }
    }
}

void display_splash_screen(SSD1306* display) {
    unsigned char image[] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0c, 0xcc, 0xcc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc3, 0x00, 0x0f, 0xff, 0x3f, 0xf0,
            0x0c, 0xcc, 0xcc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc3, 0x00, 0x0f, 0xff, 0x3f, 0xf0,
            0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x0c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x0d, 0x98, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x3d, 0x54, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x3d, 0x9c, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x0d, 0x50, 0x00, 0x3c, 0x00, 0xff, 0x00, 0x0f, 0xf0, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x0d, 0x50, 0x00, 0x3c, 0x00, 0xff, 0x00, 0x0f, 0xf0, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x3c, 0x00, 0x00, 0x30, 0x03, 0x00, 0xcc, 0x30, 0x0c, 0xc0, 0x33, 0x00, 0x0f, 0xf0, 0x30, 0x0c,
            0x3c, 0x00, 0x00, 0x30, 0x03, 0x00, 0xcc, 0x30, 0x0c, 0xc0, 0x33, 0x00, 0x0f, 0xf0, 0x30, 0x0c,
            0x0c, 0x00, 0x00, 0x3c, 0x03, 0x00, 0xcc, 0x30, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x0c, 0x00, 0x00, 0x3c, 0x03, 0x00, 0xcc, 0x30, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x3c, 0x00, 0x00, 0x30, 0x03, 0x00, 0xcc, 0x30, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x3c, 0x00, 0x00, 0x30, 0x03, 0x00, 0xcc, 0x30, 0x00, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x0c, 0x00, 0x00, 0x3c, 0x03, 0x00, 0xcc, 0x30, 0x0c, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x0c, 0x00, 0x00, 0x3c, 0x03, 0x00, 0xcc, 0x30, 0x0c, 0xc0, 0x33, 0x00, 0x0c, 0x00, 0x30, 0x0c,
            0x3c, 0x31, 0x21, 0x30, 0x03, 0xff, 0x03, 0x0f, 0xf0, 0x3f, 0xc3, 0xff, 0xcf, 0xff, 0x3f, 0xf0,
            0x3c, 0x0a, 0xa2, 0xb0, 0x03, 0xff, 0x03, 0x0f, 0xf0, 0x3f, 0xc3, 0xff, 0xcf, 0xff, 0x3f, 0xf0,
            0x0c, 0x1a, 0xaa, 0xbc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0c, 0x22, 0xba, 0xbc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3c, 0x39, 0x09, 0x30, 0x03, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
            0x3c, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0f, 0xff, 0xff, 0xfc, 0x03, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
            0x0f, 0xff, 0xff, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x33, 0x33, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x33, 0x33, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    display->addBitmapImage(0, (SCREEN_HEIGHT == 32) ? 0 : 15, 128, 32, image);
}